---
alwaysApply: true
---

# When to Create Rules

> **Purpose**: Quick lookup for identifying patterns that warrant rule creation
> **Usage**: Reference during development to determine "Should I create a rule for this?"
> **For rule creation process**: See `how_to_create_rules.mdc`

## When You Notice a Pattern
If you see code that could benefit from a rule, add this comment:
```go
// TODO: Consider creating a rule for this pattern
// See: .cursor/rules/how_to_create_rules.mdc
```

## 🔍 Code Quality & Standards Triggers

### **Inconsistency Patterns**
- Different naming conventions in same codebase
- Mixed error handling approaches
- Inconsistent logging patterns
- Different validation approaches

### **Repeated Patterns**
- Same error handling code in 3+ files
- Repeated validation logic
- Similar configuration patterns
- Duplicate test setup code

## 🏗️ Architecture & Design Triggers

### **Architectural Decisions**
- Service layer structure decisions
- Data flow pattern establishment
- Integration pattern choices
- Component interaction patterns

### **Design Patterns**
- When you implement a design pattern
- When you establish a new pattern
- When you refactor to a better pattern
- When you document a complex interaction

## 🧪 Testing & Quality Triggers

### **Testing Patterns**
- Test structure standardization
- Test data management patterns
- Mock object patterns
- Test cleanup patterns

### **Quality Assurance**
- Code review standards
- Quality gates
- Performance testing patterns
- Security testing approaches

## 🔧 Development Workflow Triggers

### **Git & Version Control**
- Commit message conventions
- Branch naming patterns
- Merge request standards
- Release process patterns

### **Code Review Standards**
- Review checklist items
- Approval criteria
- Comment standards
- Documentation requirements

## 📊 Performance & Optimization Triggers

### **Performance Patterns**
- Database optimization patterns
- Caching strategies
- Memory management patterns
- Resource cleanup patterns

### **Optimization Discoveries**
- When you find a performance improvement
- When you establish optimization patterns
- When you document performance requirements
- When you create performance standards

## 🔒 Security & Compliance Triggers

### **Security Patterns**
- Input validation patterns
- Authentication patterns
- Authorization patterns
- Data encryption patterns

### **Compliance Requirements**
- Data handling requirements
- Audit trail patterns
- Privacy protection patterns
- Regulatory compliance patterns

## 🌐 Integration & API Triggers

### **API Patterns**
- Response format standardization
- Error response patterns
- Request validation patterns
- API versioning patterns

### **External Service Integration**
- Retry logic patterns
- Timeout handling
- Circuit breaker patterns
- Service discovery patterns

## 📝 Documentation & Communication Triggers

### **Documentation Standards**
- Code documentation requirements
- API documentation patterns
- User guide standards
- Technical writing guidelines

### **Communication Patterns**
- Error message standards
- User feedback patterns
- Log message formats
- Notification patterns

## 🚀 Deployment & Operations Triggers

### **Deployment Patterns**
- Deployment process standardization
- Rollback procedures
- Health check patterns
- Monitoring setup patterns

### **Operations Standards**
- Logging requirements
- Monitoring patterns
- Alerting standards
- Maintenance procedures

## 🔄 Refactoring & Maintenance Triggers

### **Refactoring Discoveries**
- When you find a better pattern
- When you standardize inconsistent code
- When you optimize existing patterns
- When you document refactoring decisions

### **Maintenance Patterns**
- Code maintenance procedures
- Dependency update patterns
- Security update procedures
- Performance monitoring patterns

## 🔄 Rule Update Triggers

### **When to Update Existing Rules**
- **Pattern Evolution**: When you find a better way to implement a pattern
- **New Best Practices**: When you discover improved approaches
- **Anti-Pattern Discovery**: When you identify what NOT to do
- **Team Feedback**: When team members suggest rule improvements
- **Code Changes**: When refactoring affects existing patterns
- **New Requirements**: When business needs change existing patterns

### **Update Indicators**
- Existing rule feels outdated or incomplete
- New code doesn't follow existing rule patterns
- Team questions or challenges existing rule
- Better examples or approaches are discovered
- Rule conflicts with new requirements

## 🎯 Quick Decision Matrix

Create a rule when you answer "yes" to any of these:

- **Consistency**: "Will this pattern be used in multiple places?"
- **Complexity**: "Is this pattern complex enough to need documentation?"
- **Team Knowledge**: "Would other team members benefit from this knowledge?"
- **Maintenance**: "Will this pattern need to be maintained over time?"
- **Onboarding**: "Would a new team member need to understand this?"
- **Quality**: "Does this pattern improve code quality?"

**Update a rule when you answer "yes" to any of these:**
- **Evolution**: "Has this pattern evolved since the rule was created?"
- **Improvement**: "Have we found a better way to implement this pattern?"
- **Completeness**: "Is the rule missing important information or examples?"
- **Accuracy**: "Does the rule still accurately reflect our current practices?"

## 📋 Quick Checklist

Before creating a rule, ask:

- [ ] Is this pattern used in 3+ places?
- [ ] Is this pattern complex enough to need documentation?
- [ ] Would other developers benefit from this knowledge?
- [ ] Is this pattern likely to evolve over time?
- [ ] Would a new team member need to understand this?
- [ ] Does this pattern improve code quality or consistency?

**Before updating a rule, ask:**
- [ ] Has this pattern evolved since the rule was created?
- [ ] Have we found a better way to implement this pattern?
- [ ] Is the rule missing important information or examples?
- [ ] Does the rule still accurately reflect our current practices?

## 🚀 Next Steps

Once you've identified a pattern that needs a rule:

1. **Add a TODO comment** in the code:
   ```go
   // TODO: Consider creating a rule for this pattern
   // See: .cursor/rules/how_to_create_rules.mdc
   ```

2. **Create the rule** using the comprehensive guide in `how_to_create_rules.mdc`

3. **Reference the rule** in relevant code comments

## 📁 Rule Location
All rules go in: `.cursor/rules/`

## 📝 Rule Naming
- Use descriptive names: `error_handling.mdc`
- Use snake_case: `testing_patterns.mdc`
- Be specific: `cli_error_messages.mdc`# Quick Reference: When to Create Rules

> **Purpose**: Quick lookup for identifying patterns that warrant rule creation
> **Usage**: Reference during development to determine "Should I create a rule for this?"
> **For rule creation process**: See `how_to_create_rules.mdc`

## When You Notice a Pattern
If you see code that could benefit from a rule, add this comment:
```go
// TODO: Consider creating a rule for this pattern
// See: .cursor/rules/how_to_create_rules.mdc
```

## 🔍 Code Quality & Standards Triggers

### **Inconsistency Patterns**
- Different naming conventions in same codebase
- Mixed error handling approaches
- Inconsistent logging patterns
- Different validation approaches

### **Repeated Patterns**
- Same error handling code in 3+ files
- Repeated validation logic
- Similar configuration patterns
- Duplicate test setup code

## 🏗️ Architecture & Design Triggers

### **Architectural Decisions**
- Service layer structure decisions
- Data flow pattern establishment
- Integration pattern choices
- Component interaction patterns

### **Design Patterns**
- When you implement a design pattern
- When you establish a new pattern
- When you refactor to a better pattern
- When you document a complex interaction

## 🧪 Testing & Quality Triggers

### **Testing Patterns**
- Test structure standardization
- Test data management patterns
- Mock object patterns
- Test cleanup patterns

### **Quality Assurance**
- Code review standards
- Quality gates
- Performance testing patterns
- Security testing approaches

## 🔧 Development Workflow Triggers

### **Git & Version Control**
- Commit message conventions
- Branch naming patterns
- Merge request standards
- Release process patterns

### **Code Review Standards**
- Review checklist items
- Approval criteria
- Comment standards
- Documentation requirements

## 📊 Performance & Optimization Triggers

### **Performance Patterns**
- Database optimization patterns
- Caching strategies
- Memory management patterns
- Resource cleanup patterns

### **Optimization Discoveries**
- When you find a performance improvement
- When you establish optimization patterns
- When you document performance requirements
- When you create performance standards

## 🔒 Security & Compliance Triggers

### **Security Patterns**
- Input validation patterns
- Authentication patterns
- Authorization patterns
- Data encryption patterns

### **Compliance Requirements**
- Data handling requirements
- Audit trail patterns
- Privacy protection patterns
- Regulatory compliance patterns

## 🌐 Integration & API Triggers

### **API Patterns**
- Response format standardization
- Error response patterns
- Request validation patterns
- API versioning patterns

### **External Service Integration**
- Retry logic patterns
- Timeout handling
- Circuit breaker patterns
- Service discovery patterns

## 📝 Documentation & Communication Triggers

### **Documentation Standards**
- Code documentation requirements
- API documentation patterns
- User guide standards
- Technical writing guidelines

### **Communication Patterns**
- Error message standards
- User feedback patterns
- Log message formats
- Notification patterns

## 🚀 Deployment & Operations Triggers

### **Deployment Patterns**
- Deployment process standardization
- Rollback procedures
- Health check patterns
- Monitoring setup patterns

### **Operations Standards**
- Logging requirements
- Monitoring patterns
- Alerting standards
- Maintenance procedures

## 🔄 Refactoring & Maintenance Triggers

### **Refactoring Discoveries**
- When you find a better pattern
- When you standardize inconsistent code
- When you optimize existing patterns
- When you document refactoring decisions

### **Maintenance Patterns**
- Code maintenance procedures
- Dependency update patterns
- Security update procedures
- Performance monitoring patterns

## 🔄 Rule Update Triggers

### **When to Update Existing Rules**
- **Pattern Evolution**: When you find a better way to implement a pattern
- **New Best Practices**: When you discover improved approaches
- **Anti-Pattern Discovery**: When you identify what NOT to do
- **Team Feedback**: When team members suggest rule improvements
- **Code Changes**: When refactoring affects existing patterns
- **New Requirements**: When business needs change existing patterns

### **Update Indicators**
- Existing rule feels outdated or incomplete
- New code doesn't follow existing rule patterns
- Team questions or challenges existing rule
- Better examples or approaches are discovered
- Rule conflicts with new requirements

## 🎯 Quick Decision Matrix

Create a rule when you answer "yes" to any of these:

- **Consistency**: "Will this pattern be used in multiple places?"
- **Complexity**: "Is this pattern complex enough to need documentation?"
- **Team Knowledge**: "Would other team members benefit from this knowledge?"
- **Maintenance**: "Will this pattern need to be maintained over time?"
- **Onboarding**: "Would a new team member need to understand this?"
- **Quality**: "Does this pattern improve code quality?"

**Update a rule when you answer "yes" to any of these:**
- **Evolution**: "Has this pattern evolved since the rule was created?"
- **Improvement**: "Have we found a better way to implement this pattern?"
- **Completeness**: "Is the rule missing important information or examples?"
- **Accuracy**: "Does the rule still accurately reflect our current practices?"

## 📋 Quick Checklist

Before creating a rule, ask:

- [ ] Is this pattern used in 3+ places?
- [ ] Is this pattern complex enough to need documentation?
- [ ] Would other developers benefit from this knowledge?
- [ ] Is this pattern likely to evolve over time?
- [ ] Would a new team member need to understand this?
- [ ] Does this pattern improve code quality or consistency?

**Before updating a rule, ask:**
- [ ] Has this pattern evolved since the rule was created?
- [ ] Have we found a better way to implement this pattern?
- [ ] Is the rule missing important information or examples?
- [ ] Does the rule still accurately reflect our current practices?

## 🚀 Next Steps

Once you've identified a pattern that needs a rule:

1. **Add a TODO comment** in the code:
   ```go
   // TODO: Consider creating a rule for this pattern
   // See: .cursor/rules/how_to_create_rules.mdc
   ```

2. **Create the rule** using the comprehensive guide in `how_to_create_rules.mdc`

3. **Reference the rule** in relevant code comments

## 📁 Rule Location
All rules go in: `.cursor/rules/`

## 📝 Rule Naming
- Use descriptive names: `error_handling.mdc`
- Use snake_case: `testing_patterns.mdc`
- Be specific: `cli_error_messages.mdc`